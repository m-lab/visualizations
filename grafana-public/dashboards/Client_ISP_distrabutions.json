{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Full matrix Client and server comparisons.\n\nNB: This is a pre-release subject to changes, including deletion, without notification.  It is not running on production infrastructure and may be unstable.",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 504,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "rank"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 45
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 261
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "tests"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 71
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Percent"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 67
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "metro"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 55
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Pct"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 35
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ISPrank"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "id": 20,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.1.3",
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 1,
          "location": "",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    metro,\n    ISPrank, \n    SUM(hist) AS tests,\n    SUM(hist) * 100.0 / ANY_VALUE(metroTests) AS Pct,\n    ISPname,\n  FROM (\n    SELECT *,\n    FROM `${dataset}.access_ndt7_cached_histograms`(\"MinRTT\", \"${site:regex}\", ${rank})\n  )\n  GROUP BY metro, ISPrank, ISPname\n  ORDER BY ISPrank, metro\n)\n\nSELECT * FROM ISPdata\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Summary Statistics for top $rank ISPs",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 6,
        "y": 0
      },
      "id": 80,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -0.3,
              3.3
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0033750798390114966,
              0.06412651694121842
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\ndata  AS (\n  SELECT\n    bin,\n    SUM(hist) as hist,\n    siteName\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MinRTT\",  \"${site:regex}\", 900)\n  GROUP BY bin, siteName\n)\n\nSELECT\n  bin,\n  CASE \"$mode\"\n    WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n    WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n    ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n  END AS data,\n  siteName,\nFROM data\nORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download MinRTT (mS) per Site for all Clients",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 12,
        "y": 0
      },
      "id": 26,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -0.3,
              3.3
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.001998921634381452,
              0.03797951105324759
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\ndata  AS (\n  SELECT\n    bin,\n    SUM(hist) as hist,\n    siteName\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MeanThroughputMbps\",  \"${site:regex}\", 900)\n  GROUP BY bin, siteName\n)\n\nSELECT\n  bin,\n  CASE \"$mode\"\n    WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n    WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n    ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n  END AS data,\n  siteName,\nFROM data\nORDER BY bin\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download Mbps per Site for all Clients",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 18,
        "y": 0
      },
      "id": 22,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -5.3,
              0
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0006443183189195989,
              0.012242048059472377
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "\nWITH\ndata  AS (\n  SELECT\n    bin,\n    SUM(hist) as hist,\n    siteName\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"LossRate\",  \"${site:regex}\", 900)\n  GROUP BY bin, siteName\n)\n\nSELECT\n  bin,\n  CASE \"$mode\"\n    WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n    WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n    ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n  END AS data,\n  siteName,\nFROM data\nORDER BY bin\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE"
        }
      ],
      "title": "Download Loss Ratio per Site for all Clients",
      "type": "ae3e-plotly-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 13
      },
      "id": 32,
      "panels": [],
      "title": "Client ISP Summary Statistics",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 0,
        "y": 14
      },
      "id": 33,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              0,
              300
            ],
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.005430305475698122,
              0.10317580403826432
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    linBin,\n    SUM(hist) AS hist,\n    ISPname,\n  FROM `${dataset}.access_ndt7_cached_histograms`('linearMinRTT', \"${site:regex}\", ${rank})\n  GROUP BY ISPname, linBin\n)\n\nSELECT linBin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by ISPname)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by ISPname)\n      ELSE SUM(hist) OVER (PARTITION BY ISPname ORDER BY linBin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by ISPname)\n    END AS data,\n    ISPname,\n  FROM ISPdata\n  ORDER BY linBin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download MinRTT (linear mS) per top ${rank} client ISPs and selected sites. ",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 6,
        "y": 14
      },
      "id": 69,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -0.3,
              3.3
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.008158659783800285,
              0.15501453589220543
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    bin,\n    SUM(hist) AS hist,\n    ISPname,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MinRTT\", \"${site:regex}\", ${rank})\n  GROUP BY ISPname, bin\n)\n\nSELECT bin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by ISPname)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by ISPname)\n      ELSE SUM(hist) OVER (PARTITION BY ISPname ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by ISPname)\n    END AS data,\n    ISPname,\n  FROM ISPdata\n  ORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download MinRTT (mS) per top $rank client ISPs and selected Sites",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 12,
        "y": 14
      },
      "id": 17,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -0.3,
              3.3
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0020770001623531126,
              0.03946300308470914
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    bin,\n    SUM(hist) AS hist,\n    ISPname,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MeanThroughputMbps\", \"${site:regex}\", ${rank})\n  GROUP BY ISPname, bin\n  \n)\n\nSELECT bin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by ISPname)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by ISPname)\n      ELSE SUM(hist) OVER (PARTITION BY ISPname ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by ISPname)\n    END AS data,\n    ISPname,\n  FROM ISPdata\n  ORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download Mbps per top $rank client ISPs and selected Sites",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 18,
        "y": 14
      },
      "id": 19,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -5.3,
              0
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0007869805551790098,
              0.014952630548401187
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    bin,\n    SUM(hist) AS hist,\n    ISPname,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"LossRate\", \"${site:regex}\", ${rank})\n  GROUP BY ISPname, bin\n)\n\nSELECT bin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by ISPname)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by ISPname)\n      ELSE SUM(hist) OVER (PARTITION BY ISPname ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by ISPname)\n    END AS data,\n    ISPname,\n  FROM ISPdata\n  ORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download Loss Rate per top $rank client ISPs and selected Sites",
      "type": "ae3e-plotly-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 27
      },
      "id": 34,
      "panels": [],
      "repeat": "ClientISP",
      "repeatDirection": "h",
      "title": "Performance for Client ISP  $ClientISP",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 0,
        "y": 28
      },
      "id": 81,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              0,
              300
            ],
            "type": "linear"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.003339320368305876,
              0.06344708699781164
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    linBin,\n    SUM(hist) AS hist,\n    siteName,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"linearMinRTT\", \"${site:regex}\", ${rank})\n  WHERE ISPname IN ( \"${ClientISP:Sqlstring}\" )\n  GROUP BY siteName, linBin\n)\n\nSELECT linBin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n      ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY linBin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n    END AS data,\n    siteName,\n  FROM ISPdata\n  ORDER BY linBin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download MinRTT (linear mS) per MLab Site for ${ClientISP}",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 6,
        "y": 28
      },
      "id": 48,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -0.3,
              3
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.018198908149434985,
              0.34577925483926464
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    bin,\n    SUM(hist) AS hist,\n    siteName,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MinRTT\", \"${site:regex}\", ${rank})\n  WHERE ISPname IN ( \"${ClientISP:Sqlstring}\" )\n  GROUP BY siteName, bin\n)\n\nSELECT bin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n      ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n    END AS data,\n    siteName,\n  FROM ISPdata\n  ORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download MinRTT (mS) per MLab Site for $ClientISP",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 12,
        "y": 28
      },
      "id": 43,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -0.3,
              3.3
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.002914259098405026,
              0.055370922869695485
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "\nWITH\n\nISPdata AS (\n  SELECT\n    bin,\n    SUM(hist) AS hist,\n    siteName,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MeanThroughputMbps\", \"${site:regex}\", ${rank})\n  WHERE ISPname IN ( \"${ClientISP:Sqlstring}\" )\n  GROUP BY siteName, bin\n)\n\nSELECT bin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n      ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n    END AS data,\n    siteName,\n  FROM ISPdata\n  ORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download  Mbps per MLab Site for $ClientISP",
      "type": "ae3e-plotly-panel"
    },
    {
      "datasource": {
        "type": "grafana-bigquery-datasource",
        "uid": "P116E76923C5457A4"
      },
      "description": "",
      "gridPos": {
        "h": 13,
        "w": 6,
        "x": 18,
        "y": 28
      },
      "id": 47,
      "maxDataPoints": 80000,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": [],
        "layout": {
          "font": {
            "color": "grey"
          },
          "legend": {
            "orientation": "h"
          },
          "margin": {
            "b": 50,
            "l": 50,
            "r": 50,
            "t": 10
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plot_bgcolor": "rgba(0, 0, 0, 0)",
          "xaxis": {
            "autorange": false,
            "gridcolor": "#333",
            "range": [
              -5.3,
              0
            ],
            "type": "log"
          },
          "yaxis": {
            "autorange": true,
            "gridcolor": "#333",
            "range": [
              -0.0007152308407538534,
              0.013589385974323211
            ],
            "type": "linear"
          }
        },
        "onclick": "console.log(\"okay\");\nconsole.log(data)\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data);\nvar sites = {};\n\nvar x = data.series[0].fields[0].values;\nvar y = data.series[0].fields[1].values;\nvar names = data.series[0].fields[2].values;\n\nnames.forEach(site => {\n  sites[site] = {\n    x: [],\n    y: [],\n    name: site,\n    line: {\n      width: 1\n    }\n  }\n}); \nx.forEach((xv, i) => {\n  sites[names[i]].x.push(x[i]);\n  sites[names[i]].y.push(y[i]);\n})\nvar data = [];\nObject.keys(sites).sort().forEach(site => {\n  data.push(sites[site]);\n});\nconsole.log(data);\nvar site = \"atl03\";\nvar trace = {\n  x: x, //.filter((element, i) => names[i] === site),\n  y: y, //.filter((element, i) => names[i] === site),\n  name: names //.filter((element, i) => names[i] === site)\n};\nconsole.log(\"okay2\");\nconsole.log(trace);\n//return {data:[trace]};\nreturn {data:data};"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-bigquery-datasource",
            "uid": "P116E76923C5457A4"
          },
          "editorMode": "code",
          "format": 0,
          "group": [],
          "location": "US",
          "metricColumn": "none",
          "orderByCol": "1",
          "orderBySort": "1",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "\nWITH\n\nISPdata AS (\n  SELECT\n    bin,\n    SUM(hist) AS hist,\n    siteName,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"LossRate\", \"${site:regex}\", ${rank})\n  WHERE ISPname IN ( \"${ClientISP:Sqlstring}\" )\n  GROUP BY siteName, bin\n)\n\nSELECT bin,\n    CASE \"$mode\"\n      WHEN \"pdf\" THEN hist / SUM(hist) OVER (partition by siteName)\n      WHEN \"peak\" THEN hist / MAX(hist) OVER (partition by siteName)\n      ELSE SUM(hist) OVER (PARTITION BY siteName ORDER BY bin ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) / SUM(hist) OVER (partition by siteName)\n    END AS data,\n    siteName,\n  FROM ISPdata\n  ORDER BY bin",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "-- value --"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "-- time --",
          "timeColumnType": "DATE",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Download Loss Rate per MLab Site for $ClientISP",
      "type": "ae3e-plotly-panel"
    }
  ],
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "Google BigQuery (mlab-collaboration)",
          "value": "P116E76923C5457A4"
        },
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "grafana-bigquery-datasource",
        "queryValue": "",
        "refresh": 1,
        "regex": "/(mlab-oti|mlab-staging|mlab-sandbox|mlab-collaboration)/",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "hide": 2,
        "name": "dataset",
        "query": "mm_preproduction",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "allValue": ".*",
        "current": {
          "selected": true,
          "text": [
            "gru SA Sao Paulo, BR"
          ],
          "value": [
            "gru"
          ]
        },
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "P116E76923C5457A4"
        },
        "definition": "",
        "description": "Metro picker using cached metadata.   Sorted by continent, country and city, to facilitate comparing nearby metros.",
        "hide": 0,
        "includeAll": false,
        "label": "MLab metros",
        "multi": true,
        "name": "site",
        "options": [],
        "query": {
          "editorMode": "code",
          "format": 1,
          "location": "",
          "project": "measurement-lab",
          "rawQuery": true,
          "rawSql": "# From: 2024-12-20 Prototype cached site picker  \n\nSELECT\n  CONCAT(metro, ' ', ContinentCode, ' ', City, ', ', CountryCode) AS text,\n  metro AS value,\nFROM (\n  SELECT\n    REGEXP_EXTRACT(site, '^([a-z]{3})') AS metro,\n    ANY_VALUE(ContinentCode) AS ContinentCode,\n    ANY_VALUE(City) AS City,\n    ANY_VALUE(CountryCode) AS CountryCode,\n  FROM `${dataset}.cached_metadata` GROUP BY metro ORDER BY  ContinentCode, CountryCode, metro\n)\n",
          "refId": "tempvar",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "5",
          "value": "5"
        },
        "description": "Number of ISPs to include - TODO rename the variable",
        "hide": 0,
        "includeAll": false,
        "label": "Client Rows",
        "multi": false,
        "name": "rank",
        "options": [
          {
            "selected": false,
            "text": "1",
            "value": "1"
          },
          {
            "selected": false,
            "text": "2",
            "value": "2"
          },
          {
            "selected": true,
            "text": "5",
            "value": "5"
          },
          {
            "selected": false,
            "text": "10",
            "value": "10"
          },
          {
            "selected": false,
            "text": "20",
            "value": "20"
          },
          {
            "selected": false,
            "text": "50",
            "value": "50"
          }
        ],
        "query": "1,2,5,10,20,50",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "allValue": ".*",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-bigquery-datasource",
          "uid": "P116E76923C5457A4"
        },
        "definition": "",
        "description": "Choose high volume Client ISPs. ",
        "hide": 0,
        "includeAll": true,
        "label": "Client ISPs",
        "multi": true,
        "name": "ClientISP",
        "options": [],
        "query": {
          "editorMode": "code",
          "format": 1,
          "location": "",
          "project": "mlab-oti",
          "rawQuery": true,
          "rawSql": "WITH\n\nISPdata AS (\n  SELECT\n    ISPrank,\n    ISPname,\n    SUM(hist) AS tests,\n  FROM `${dataset}.access_ndt7_cached_histograms`(\"MinRTT\", \"${site:regex}\", ${rank})\n  GROUP BY ISPrank, ISPname\n  ORDER BY ISPrank\n  \n)\n\nSELECT * FROM ISPdata\n",
          "refId": "tempvar",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "pdf",
          "value": "pdf"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "mode",
        "options": [
          {
            "selected": true,
            "text": "pdf",
            "value": "pdf"
          },
          {
            "selected": false,
            "text": "peak",
            "value": "peak"
          },
          {
            "selected": false,
            "text": "cdf",
            "value": "cdf"
          }
        ],
        "query": "pdf,peak,cdf",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "2024-12-18T05:44:57.788Z",
    "to": "2024-12-18T05:49:57.788Z"
  },
  "timepicker": {
    "hidden": true
  },
  "timezone": "utc",
  "title": "Client ISP Distributions from cached histograms",
  "uid": "20250114a",
  "version": 9,
  "weekStart": ""
}
